apiVersion: v1
kind: PersistentVolume
metadata:
  name: ebs-static
spec:
  accessModes:
  - ReadWriteOnce
  capacity:
    storage: 20Gi
  csi:
    driver: ebs.csi.aws.com
    fsType: ext4
    volumeHandle: {EBS volume ID} # get volume id from aws console

---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: ebs-static-claim
spec:
  storageClassName: "" # In static provisioning it should always be empty. Empty string must be explicitly set otherwise default StorageClass will be set
  volumeName: ebs-static
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 5Gi    

---
apiVersion: v1
kind: Pod
metadata:
  name: pod-using-pvc
  labels:
    purpose: ebs-static
spec:
  nodeSelector:
    topology.kubernetes.io/zone: us-east-1d
  containers:
  - name: nginx
    image: nginx
    volumeMounts: # its equivalent to $ docker run -v hostpath:containerpath
    - name: ebs-pod-claim
      mountPath: /usr/share/nginx/html
  volumes:
  - name: ebs-pod-claim   # this volume comes from pvc given below
    persistentVolumeClaim:
      claimName: ebs-static-claim      

---
apiVersion: v1 
kind: Service
metadata:
  name: lb-example
spec:
  type: LoadBalancer
  selector:
    purpose: ebs-static
  ports:
  - name: service-port
    port: 80
    targetPort: 80
    protocol: TCP
    # we can give specific node-port also. Then open this port in nodes security groups, to access nginx from outside
    nodePort: 30007


# whatevr data stored in the volume mount path /usr/share/nginx/html will be stored to PVC.
# if we delete the pod and then create the pod again, then the data in the path /usr/share/nginx/html will exist in new pod.          